package layouts

import "fmt"
import "github.com/ShuaibKhan786/mystreams/views/components/button"
import "github.com/ShuaibKhan786/mystreams/views/components/modal"
import "github.com/ShuaibKhan786/mystreams/views/components/input"
import "github.com/ShuaibKhan786/mystreams/views/components/dropdown"
import "github.com/ShuaibKhan786/mystreams/views/components/table"
import "github.com/ShuaibKhan786/mystreams/views/components/pagination"
import "github.com/ShuaibKhan786/mystreams/views/components/localtime"
import "github.com/ShuaibKhan786/mystreams/models"
import "github.com/ShuaibKhan786/mystreams/utils"

templ AdminPeopleLayout(tablePagination templ.Component) {
	@AdminDefaultContentLayout("People") {
		<section class="flex gap-3">
			@input.Input(input.Props{
				Name: "filter[name:similar]", Type: "text", Placeholder: "eg: search people", Class: "w-70",
				Attributes: templ.Attributes{
					"hx-get": "/admin/people/list?page=1&size=10&partial=true",
					"hx-trigger": "keyup changed delay:500ms",
					"hx-target": "#table-pagination-container",
					"hx-swap": "outerHTML",
					"hx-push-url": true,
				},
			})
			@button.Button(button.Props{
				Size:    button.Medium,
				Outline: true,
				Class:   " ml-auto",
				Icon:    "fa-solid fa-plus text-sm",
				Attributes: templ.Attributes{
					"hx-get":    "/admin/people/new",
					"hx-target": "body",
					"hx-swap":   "beforeend",
				},
			}) {
				Create
			}
		</section>
		<section>
			@tablePagination
		</section>
	}
}

templ AdminPeopleCreateLayout() {
	@modal.Modal(modal.Props{
		Title: "Create Person",
	}) {
		// add necessary things like table refresh and so on
		<form
			hx-post="/admin/people"
			hx-target="this"
			hx-swap="none"
			class="px-2 py-10 flex flex-col gap-3"
		>
			@input.Input(input.Props{
				Name: "name", Type: "text", Placeholder: "eg: Cillian Murphy", Class: "w-70",
			})
			@dropdown.Dropdown(dropdown.Props{
				Name: "gender", Label: "Select Gender",
			}) {
				@dropdown.DropdownItem(dropdown.ItemProps{
					Label: "Male", Value: "male",
				})
				@dropdown.DropdownItem(dropdown.ItemProps{
					Label: "Female", Value: "female",
				})
			}
			@button.Button(button.Props{
				Class:   " ml-auto",
				Outline: true,
				Size:    button.Small,
				Icon:    "fa-solid fa-plus fa-sm",
				Attributes: templ.Attributes{
					"type": "submit",
				},
			}) {
				Create
			}
		</form>
	}
}

templ AdminPeopleEditLayout(person *models.Person) {
	@modal.Modal(modal.Props{
		Title: "Update Person",
	}) {
		// add necessary things like table refresh and so on
		<form
			hx-put={ fmt.Sprintf("/admin/people/%d", utils.SanitizeNilPointer(person.ID)) }
			hx-target="this"
			hx-swap="none"
			class="px-2 py-10 flex flex-col gap-3"
		>
			<input type="hidden" name="id" value={utils.SanitizeNilPointer(person.ID)}/>
			@input.Input(input.Props{
				Name: "name", Type: "text", Placeholder: "eg: Cillian Murphy", Class: "w-70",
				Value: utils.SanitizeNilPointerUI(person.Name),
			})
			@dropdown.Dropdown(dropdown.Props{
				Name: "gender", Label: "Select Gender",
			}) {
				@dropdown.DropdownItem(dropdown.ItemProps{
					Label: "Male", Value: "male", Selected: "male" == utils.SanitizeNilPointer(person.Gender),
				})
				@dropdown.DropdownItem(dropdown.ItemProps{
					Label: "Female", Value: "female", Selected: "female" == utils.SanitizeNilPointer(person.Gender),
				})
			}
			@button.Button(button.Props{
				Class:   " ml-auto",
				Outline: true,
				Size:    button.Small,
				Icon:    "fa-solid fa-pen-to-square fa-sm",
				Attributes: templ.Attributes{
					"type": "submit",
				},
			}) {
				Update
			}
		</form>
	}
}

templ AdminPeopleRemoveLayout(id int) {
	@modal.Modal(modal.Props{
		Title: "Delete Person",
	}) {
		<div class="p-4 flex flex-col gap-2 items-center">
			<h2 class="p-4">Are you sure you want to delete</h2>
			@button.Button(button.Props{
				Size:  button.Medium,
				Class: " w-full !bg-[#FF0000] text-white dark:text-white",
				Icon:  "fa-solid fa-trash text-sm",
				Attributes: templ.Attributes{
					"hx-delete": fmt.Sprintf("/admin/people/%d", id),
					"hx-target": "this",
					"hx-swap":   "none",
				},
			}) {
				Delete
			}
			@button.Button(button.Props{
				Outline: true,
				Size:    button.Medium,
				Class:   " w-full",
				Icon:    "fa-solid fa-xmark text-sm",
			}) {
				Cancel
			}
		</div>
	}
}

templ AdminPeopleTableLayout(people []*models.Person) {
	@table.Table() {
		@table.TableHeader() {
			@table.TableHead() {
				Name
			}
			@table.TableHead() {
				Gender
			}
			@table.TableHead() {
				Updated At
			}
			@table.TableHead() {
				Created At
			}
			@table.TableHead() {
				Actions
			}
		}
		@table.TableBody() {
			if len(people) ==  0 {
				@table.TableRow() {
					@table.TableCellNoContent(5) {
						No records to show
					}
				}
			} else {
				for _, person := range people {
					@table.TableRow() {
						@table.TableCell() {
							{ utils.SanitizeNilPointerUI(person.Name) }
						}
						@table.TableCell() {
							{ utils.SanitizeNilPointerUI(person.Gender) }
						}
						@table.TableCell() {
							@localtime.LocalTime(
								localtime.Props{
									T:      utils.SanitizeNilPointer(person.UpdatedAt),
									Format: localtime.YYYYMMDDHHMM,
								},
							)
						}
						@table.TableCell() {
							@localtime.LocalTime(
								localtime.Props{
									T:      utils.SanitizeNilPointer(person.CreatedAt),
									Format: localtime.YYYYMMDDHHMM,
								},
							)
						}
						@table.TableCell() {
							<div class="flex gap-2">
								@button.Button(button.Props{
									Size:  button.None,
									Class: " p-2",
									Icon:  "fa-solid fa-pen-to-square text-sm text-[#10B981] dark:text-[#34D399]",
									Attributes: templ.Attributes{
										"hx-get":    fmt.Sprintf("/admin/people/%d/edit", utils.SanitizeNilPointer(person.ID)),
										"hx-target": "body",
										"hx-swap":   "beforeend",
									},
								})
								@button.Button(button.Props{
									Size:  button.None,
									Class: " p-2",
									Icon:  "fa-solid fa-trash text-sm text-[#EF4444] dark:text-[#F87171]",
									Attributes: templ.Attributes{
										"hx-get":    fmt.Sprintf("/admin/people/%d/remove", utils.SanitizeNilPointer(person.ID)),
										"hx-target": "body",
										"hx-swap":   "beforeend",
									},
								})
							</div>
						}
					}
				}
			}
		}
	}
}

templ AdminPeoplePaginationTableLayout(baseURL, queries string, currentPage, totalPage int, people []*models.Person) {
	<div id="table-pagination-container">
    	@AdminPeopleTableLayout(people)
    	@pagination.Pagination(pagination.Props{
    		BaseURL:     baseURL,
    		PageSize:    10,
    		CurrentPage: currentPage,
    		TotalPage:   totalPage,
    		Queries:     queries,
    		Target:		 "#table-pagination-container",
    	})
	</div>
}
