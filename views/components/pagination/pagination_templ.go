// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package pagination

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/ShuaibKhan786/mystreams/views/components/button"
import "fmt"

type Props struct {
	ID          string
	BaseURL     string
	PageSize    int
	CurrentPage int
	TotalPage   int
	Queries     string
	Class       string
	Target      string
	Attributes  templ.Attributes
}

// button, input component dependancy
func Pagination(props ...Props) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)

		var p Props
		if len(props) > 0 {
			p = props[0]
		}
		label := ""
		if p.CurrentPage > 0 && p.TotalPage > 0 {
			label = fmt.Sprintf("Showing page %d of %d", p.CurrentPage, p.TotalPage)
		}
		icons := [...]string{
			"fa-angles-left", "fa-angle-left", "fa-angle-right", "fa-angles-right",
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"py-1.5 flex items-center justify-between gap-1.5 \"><section><div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(label)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/components/pagination/pagination.templ`, Line: 35, Col: 15}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div></section><section class=\"grid grid-cols-4 gap-1.5\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for index, icon := range icons {

			page := p.CurrentPage
			disableButton := false
			switch index {
			case 0: //first page
				page = 1
				if p.CurrentPage <= 1 {
					disableButton = true
				}
			case 1: // prev page
				page = p.CurrentPage - 1
				if p.CurrentPage <= 1 {
					disableButton = true
				}
			case 2: // next page
				page = p.CurrentPage + 1
				if p.CurrentPage >= p.TotalPage {
					disableButton = true
				}
			case 3: // last page
				page = p.TotalPage
				if p.CurrentPage >= p.TotalPage {
					disableButton = true
				}
			}
			templ_7745c5c3_Err = button.Button(button.Props{
				Icon:     fmt.Sprintf("fa-solid %s", icon),
				Outline:  true,
				Size:     button.None,
				Class:    " p-2",
				Disabled: disableButton,
				Attributes: MergeAttributes(
					templ.Attributes{
						"hx-get":      fmt.Sprintf("%s?partial=true&page=%d&size=%d&%s", p.BaseURL, page, p.PageSize, p.Queries),
						"hx-push-url": fmt.Sprintf("%s?page=%d&size=%d&%s", p.BaseURL, page, p.PageSize, p.Queries),
						"hx-target":   p.Target,
						"hx-swap":     "outerHTML",
					},
					p.Attributes,
				),
			}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</section></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func MergeAttributes(tmplAttrbs ...templ.Attributes) templ.Attributes {
	merged := templ.Attributes{}

	for _, tmplAttrb := range tmplAttrbs {
		for key, value := range tmplAttrb {
			merged[key] = value
		}
	}

	return merged
}

var _ = templruntime.GeneratedTemplate
