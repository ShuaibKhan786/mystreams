package dropdown

import "fmt"

type Props struct {
	ID 		   string
	Class      string
	Name       string
	Label      string
	Icon       string
	Attributes templ.Attributes
}

templ Dropdown(props ...Props) {
	{{ var p Props }}
	{{
	if len(props) > 0 {
		p = props[0]
	}
	style := `
	relative w-full
	px-3 py-1.5 flex gap-3 items-center rounded-lg border
	border-[#e5e5e5] dark:border-[#ffffff1a]
	bg-[#f9fafb] dark:bg-[#18181b]
	`
	style += p.Class
	}}
	<div
		x-data={ fmt.Sprintf(`{
            open: false,
			label: '%s',
			selected: '',
            toggle() {
                if (this.open) {
                    return this.close()
                }

                this.$refs.button.focus()

                this.open = true
            },
            close(focusAfter) {
                if (! this.open) return

                this.open = false

                focusAfter && focusAfter.focus()
            }
        }`, p.Label) }
		x-on:keydown.escape.prevent.stop="close($refs.button)"
		x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
		x-id="['dropdown-button']"
		class="relative"
	>
		<input type="hidden" name={ p.Name } x-model="selected"/>
		<button
			x-ref="button"
			x-on:click="toggle()"
			:aria-expanded="open"
			:aria-controls="$id('dropdown-button')"
			type="button"
			{ p.Attributes... }
			class={ style }
		>
			if p.Icon != "" {
				<span class={ p.Icon }></span>
			}
			<span x-text="label"></span>
			<span class="fa-solid fa-angle-down text-xs ml-auto "></span>
		</button>
		<div
			id={p.ID}
			x-ref="panel"
			x-show="open"
			x-transition.origin.top.left
			x-on:click.outside="close($refs.button)"
			:id="$id('dropdown-button')"
			style="display: none;"
			class="
			absolute z-100 min-w-full p-1.5 left-0 mt-1 flex flex-col
			rounded-lg border-[#e5e5e5] dark:border-[#ffffff1a]
			bg-[#f9fafb] dark:bg-[#18181b]
			"
		>
			{ children... }
		</div>
	</div>
}

type ItemProps struct {
	Class      string
	Label      string
	Icon       string
	Value      string
	Selected   bool
	Bind       string
	Attributes templ.Attributes
}

templ DropdownItem(props ...ItemProps) {
	{{ var p ItemProps }}
	{{
		if len(props) > 0 {
			p = props[0]
		}
		style := `
		px-3 py-1 :
		flex gap-2 items-center justify-between
		rounded-lg
		hover:bg-[#f5f5f5] hover:dark:bg-[#262626]
		`
		style += p.Class
		clickString := fmt.Sprintf("selected = '%s'; label='%s'; open = false; ", p.Value, p.Label)

		if p.Bind != "" {
			//fix this
			clickString = fmt.Sprintf("selected = '%s'; label='%s'; open = false; $dispatch('update-%s', '%s');", p.Value, p.Label, p.Bind, p.Label)
		}
	}}
	<button
		type="button"
		if p.Selected {
			x-init={ fmt.Sprintf("label = '%s'; selected = '%s'", p.Label, p.Value) }
		}
		@click={ clickString }
		{ p.Attributes... }
		class={ style }
	>
		<div class="flex flex-col gap-2 items-center">
			if p.Icon != "" {
				<span class={ p.Icon }></span>
			}
			<span>
				{ p.Label }
			</span>
		</div>
		<span :class={ fmt.Sprintf("selected === '%s' ? 'fa-solid fa-check text-sm' : ''", p.Value) }></span>
	</button>
}
